# Generated from C:/Users/giglerf/PycharmProjects/VolTRE/parse/TRE.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,65,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,
        1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,4,12,55,8,12,11,12,
        12,12,56,1,13,4,13,60,8,13,11,13,12,13,61,1,13,1,13,0,0,14,1,1,3,
        2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        1,0,3,2,0,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,66,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,29,1,0,0,0,3,31,1,0,0,0,
        5,33,1,0,0,0,7,35,1,0,0,0,9,37,1,0,0,0,11,39,1,0,0,0,13,41,1,0,0,
        0,15,43,1,0,0,0,17,45,1,0,0,0,19,47,1,0,0,0,21,49,1,0,0,0,23,51,
        1,0,0,0,25,54,1,0,0,0,27,59,1,0,0,0,29,30,5,40,0,0,30,2,1,0,0,0,
        31,32,5,41,0,0,32,4,1,0,0,0,33,34,5,46,0,0,34,6,1,0,0,0,35,36,5,
        42,0,0,36,8,1,0,0,0,37,38,5,43,0,0,38,10,1,0,0,0,39,40,5,60,0,0,
        40,12,1,0,0,0,41,42,5,62,0,0,42,14,1,0,0,0,43,44,5,95,0,0,44,16,
        1,0,0,0,45,46,5,91,0,0,46,18,1,0,0,0,47,48,5,44,0,0,48,20,1,0,0,
        0,49,50,5,93,0,0,50,22,1,0,0,0,51,52,7,0,0,0,52,24,1,0,0,0,53,55,
        7,1,0,0,54,53,1,0,0,0,55,56,1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,
        57,26,1,0,0,0,58,60,7,2,0,0,59,58,1,0,0,0,60,61,1,0,0,0,61,59,1,
        0,0,0,61,62,1,0,0,0,62,63,1,0,0,0,63,64,6,13,0,0,64,28,1,0,0,0,3,
        0,56,61,1,6,0,0
    ]

class TRELexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    LETTER = 12
    INT = 13
    WS = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'.'", "'*'", "'+'", "'<'", "'>'", "'_'", "'['", 
            "','", "']'" ]

    symbolicNames = [ "<INVALID>",
            "LETTER", "INT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "LETTER", "INT", "WS" ]

    grammarFileName = "TRE.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


