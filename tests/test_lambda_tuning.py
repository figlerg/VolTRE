import os
import warnings
from typing import Union

import pytest
from antlr4.error.Errors import ParseCancellationException

from match.match import match
from misc.disambiguate import disambiguate
from parse.quickparse import quickparse
from tests.file_helper import all_tre_files
from sample.sample import sample, DurationSamplerMode

from misc.exceptions import UserError, EmptyLanguageError

# check which should fail
# tests = all_tre_files(ignore_files = ['TODO'])

tests = list()

warnings.warn("TODO: Improve these tests.")


# standard example
tests.append((os.path.join('..','experiments', 'spec_00.tre'), 3,   None,   [-1],   False))
tests.append((os.path.join('..','experiments', 'spec_00.tre'), 0,   None,   [-1],   False))
tests.append((os.path.join('..','experiments', 'spec_00.tre'), -27, None,   [-1],   True))    # invalid input
tests.append((os.path.join('..','experiments', 'spec_01.tre'), 4,   None,   [-1],   False))
tests.append((os.path.join('..','experiments', 'spec_02.tre'), 2,  None,   [-1],   False))
tests.append((os.path.join('..','experiments', 'spec_03.tre'), 2,   None,   [-1],   False))      # vanilla invalid, domain inf
tests.append((os.path.join('..','experiments', 'spec_03.tre'), 2,   0.5,    [-1],   False))
tests.append((os.path.join('..','experiments', 'spec_04.tre'), 4,   None,   [-1],   False))     # vanilla invalid, domain inf
tests.append((os.path.join('..','experiments', 'spec_04.tre'), 6,   27.5,   [-1],   False))
tests.append((os.path.join('..','experiments', 'spec_05.tre'), 1,   None,   [-1],   False))
tests.append((os.path.join('..','experiments', 'spec_06.tre'), 6,   None,   [-1],   False))


# intersection tests by
tests.append((os.path.join('..','experiments', 'spec_12_intersection.tre'), 3, 1.5,     [-1], False))
tests.append((os.path.join('..','experiments', 'spec_12_intersection.tre'), 7, 2,       [-1], False))
tests.append((os.path.join('..','experiments', 'spec_12_intersection.tre'), 5, 2.5,     [-1], False))
tests.append((os.path.join('..','experiments', 'spec_12_intersection.tre'), 1, 3,       [-1], False))

# TAKiller with n = 15. This was autogenerated by my script. will take longer
tests.append((os.path.join('..','experiments', 'TAKiller_15_gen.tre'), 3, None,         [-1], False))
tests.append((os.path.join('..','experiments', 'TAKiller_15_gen.tre'), 5, None,         [-1], False))



@pytest.mark.parametrize("file_path, n, T,lambdas, expected_to_fail", tests)
def test_sample_maxent(file_path, n, T, lambdas, expected_to_fail):
    """
    Sampling tests. I need to find n and T wherever applicable.
    :param file_path: Path to the .tre file
    :param expected_to_fail: Boolean indicating if the test is expected to fail
    :return:
    """

    # i only input good testcases here
    print(file_path)

    node = quickparse(file_path)
    print(f"Inputs: "
          f"\n\tphi = {node.getText()}"
          f"\n\tn = {n}"
          f"\n\tT = {T} (sampled if None is given)"
          f"\n\texpected to fail : {expected_to_fail}")

    saved_exception = None
    try:

        w = sample(node=node,n=n,T=T,mode=DurationSamplerMode.MAX_ENT, lambdas=lambdas)

        if T:
            assert w.duration == T, "Bad duration from sampler."

        assert match(w,node) > 0, "Sampled outside of the language."

        print(f"Sampled word {w} with duration {w.duration}.")
        failed = False


    except (UserError, EmptyLanguageError) as e:
        print(f"Failed bad test successfully: {e}")
        failed = True
        saved_exception = e

    # todo revisit this, unnecessarily complicated testing method
    if not ((failed and expected_to_fail) or (not failed and not expected_to_fail)):
        print(saved_exception)

    assert (failed and expected_to_fail) or (not failed and not expected_to_fail), "Unexpected test result."





